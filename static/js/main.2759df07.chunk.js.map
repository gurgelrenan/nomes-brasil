{"version":3,"sources":["components/Header.jsx","lib/utils.js","components/BrazilNames.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","Grid","container","className","AppBar","position","Toolbar","Typography","variant","formatData","data","result","res","forEach","periodo","frequencia","year","replace","slice","push","BrazilNames","useState","name","setName","nome","sexo","localidade","setData","errorMessage","setErrorMessage","fetchData","a","axios","Array","isArray","length","formatedData","console","log","message","style","paddingTop","onSubmit","e","preventDefault","handleSubmit","justify","item","TextField","required","label","autoFocus","onChange","target","value","Button","type","color","LineChart","width","height","margin","top","right","bottom","left","Line","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2759df07.chunk.js","sourcesContent":["import Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2} className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Nomes do Brasil\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </Grid>\n  )\n}\n\nexport default Header;\n","const convertYearToInteger = interval => {\n  return interval.replace(/\\D/g, \"\").slice(-4);\n}\n\nexport const formatData = (data) => {\n  const result = []\n\n  data.res.forEach(({periodo, frequencia}) => {\n    let year = convertYearToInteger(periodo)\n\n    result.push({year, frequencia})\n  })\n\n  return result;\n}\n","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport axios from 'axios';\nimport { formatData } from '../lib/utils';\n\nconst BrazilNames = () => {\n  const [name, setName] = useState('')\n  const [data, setData] = useState({ nome: '', sexo: null, localidade: '', res: [] })\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const fetchData = async () => {\n    if (name === '') return;\n    \n    try {\n      const result = await axios(\n        `https://servicodados.ibge.gov.br/api/v2/censos/nomes/${name}`\n      );\n      \n      if (Array.isArray(result.data) && result.data.length) {\n        const formatedData = formatData(result.data[0]);\n        setData(formatedData);\n      } else {\n        setErrorMessage(`NÃ£o existe resultados para o nome: ${name}`)\n        setData({ nome: '', sexo: null, localidade: '', res: [] })\n      }\n      \n    } catch (error) {\n      console.log('error:', error.message);\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  \n    fetchData();\n  }\n\n  return (\n    <div style={{paddingTop: 20}}>\n      <div>\n        <span>{errorMessage}</span>\n        <form onSubmit={(e) => handleSubmit(e)}>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <TextField\n                name=\"name\"\n                required\n                label=\"Nome\"\n                autoFocus\n                onChange={(e) => setName(e.target.value)}\n                value={name}\n              />\n            </Grid>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Buscar\n            </Button>\n          </Grid>\n        </form>\n      </div>\n\n      <Grid container justify=\"center\">\n        <Grid item>\n          <LineChart width={800} height={600} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n            <Line type=\"monotone\" dataKey=\"frequencia\" stroke=\"#8884d8\" />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"year\" />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default BrazilNames;\n","import React from 'react'\nimport Container from '@material-ui/core/Container';\nimport Header from './components/Header';\nimport BrazilNames from './components/BrazilNames';\n\nconst App = () => {\n  return (\n    <Container>\n      <Header />\n      <BrazilNames />\n    </Container>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}