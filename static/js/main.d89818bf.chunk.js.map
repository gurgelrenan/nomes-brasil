{"version":3,"sources":["components/BrazilNames.jsx","App.js","reportWebVitals.js","index.js"],"names":["BrazilNames","useState","name","setName","nome","sexo","localidade","res","namesQuery","setNamesQuery","errorMessage","setErrorMessage","fetchData","a","axios","result","Array","isArray","data","length","console","log","message","onSubmit","e","preventDefault","handleSubmit","type","placeholder","value","onChange","target","map","periodo","frequencia","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAyDeA,EAtDK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,OAEYF,mBAAS,CAAEG,KAAM,GAAIC,KAAM,KAAMC,WAAY,GAAIC,IAAK,KAFlE,mBAEjBC,EAFiB,KAELC,EAFK,OAGgBR,mBAAS,IAHzB,mBAGjBS,EAHiB,KAGHC,EAHG,KAKlBC,EAAS,uCAAG,4BAAAC,EAAA,yDACH,KAATX,EADY,0EAIOY,IAAM,wDAAD,OACgCZ,IAL5C,OAIRa,EAJQ,OAQVC,MAAMC,QAAQF,EAAOG,OAASH,EAAOG,KAAKC,OAC5CV,EAAcM,EAAOG,KAAK,KAE1BP,EAAgB,yCAAD,OAAuCT,IACtDO,EAAc,CAAEL,KAAM,GAAIC,KAAM,KAAMC,WAAY,GAAIC,IAAK,MAZ/C,gDAgBda,QAAQC,IAAI,SAAU,KAAMC,SAhBd,yDAAH,qDA0Bf,OACE,gCACE,iDAEA,gCACE,+BAAOZ,IACP,uBAAMa,SAAU,SAACC,GAAD,OAZD,SAAAA,GACnBA,EAAEC,iBAEFb,IAS2Bc,CAAaF,IAApC,UACE,uBAAOG,KAAK,OAAOzB,KAAK,OAAO0B,YAAY,gBAAgBC,MAAO3B,EAAM4B,SAAU,SAACN,GAAD,OAAOrB,EAAQqB,EAAEO,OAAOF,UAC1G,uBAAOF,KAAK,SAASE,MAAM,iBAI/B,gCACE,6CAAgBrB,EAAWF,cAC3B,uCAAUE,EAAWJ,QACpBI,EAAWD,IAAIyB,KAAI,gBAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,WAAX,OAClB,8BAAID,EAAJ,MAAgBC,eCzCXC,EANH,WACV,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d89818bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios'\n\nconst BrazilNames = () => {\n  const [name, setName] = useState('')\n  const [namesQuery, setNamesQuery] = useState({ nome: '', sexo: null, localidade: '', res: [] })\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const fetchData = async () => {\n    if (name === '') return;\n    \n    try {\n      const result = await axios(\n        `https://servicodados.ibge.gov.br/api/v2/censos/nomes/${name}`\n      );\n      \n      if (Array.isArray(result.data) && result.data.length) {\n        setNamesQuery(result.data[0]);\n      } else {\n        setErrorMessage(`NÃ£o existe resultados para o nome: ${name}`)\n        setNamesQuery({ nome: '', sexo: null, localidade: '', res: [] })\n      }\n      \n    } catch (error) {\n      console.log('error:', error.message);\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  \n    fetchData();\n  }\n\n  return (\n    <div>\n      <h2>Nomes do Brasil</h2>\n\n      <div>\n        <span>{errorMessage}</span>\n        <form onSubmit={(e) => handleSubmit(e)}>\n          <input type=\"text\" name=\"name\" placeholder=\"Digite o nome\" value={name} onChange={(e) => setName(e.target.value)} />\n          <input type=\"submit\" value=\"Buscar\" />\n        </form>\n      </div>\n\n      <div>\n        <p>Localidade: {namesQuery.localidade}</p>\n        <p>Nome: {namesQuery.nome}</p>\n        {namesQuery.res.map(({periodo, frequencia}) =>\n          <p>{periodo} - {frequencia}</p>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default BrazilNames;\n","import React from 'react'\nimport BrazilNames from './components/BrazilNames';\n\nconst App = () => {\n  return (\n    <BrazilNames />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}